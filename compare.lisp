;;; -*- Lisp -*-

(in-package "TABLE")

(defgeneric less (left right)
  (:method (left (right null))    nil)
  (:method ((left null) right)    (not (null right)))
  (:method ((left character) (right character)) (char< left right))
  (:method ((left character) (right cons))     t)
  (:method ((left character) (right null))   nil)
  (:method ((left character) (right number))   t)
  (:method ((left character) (right string))   t)
  (:method ((left character) (right symbol))   t)
  (:method ((left character) (right vector))   t)

  (:method ((left cons) (right character))    nil)
  (:method ((left cons) (right cons))         (or (less (car left) (car right))
                                                  (and (not (less (car right) (car left)))
                                                       (less (cdr left) (cdr right)))))
  (:method ((left cons) (right null))         nil)
  (:method ((left cons) (right number))       t)
  (:method ((left cons) (right string))       t)
  (:method ((left cons) (right symbol))       t)
  (:method ((left cons) (right vector))       (do ((i 0 (1+ i)))
                                                  ((or (>= i (length left))
                                                       (>= i (length right))
                                                       (less (elt left i) (aref right i))
                                                       (less (aref right i) (elt left i)))
                                                   (cond ((>= i (length left)) nil)
                                                         ((>= i (length right)) t)
                                                         ((less (elt left i) (aref right i)) t)
                                                         ((less (aref right i) (elt left i)) nil)))))

  (:method ((left number) (right character))  nil)
  (:method ((left number) (right cons))       nil)
  (:method ((left number) (right null))       nil)
  (:method ((left number) (right number))     (< left right))
  (:method ((left number) (right string))     t)
  (:method ((left number) (right symbol))     t)
  (:method ((left number) (right vector))     t)

  (:method ((left string) (right character))  nil)
  (:method ((left string) (right cons))       nil)
  (:method ((left string) (right null))       nil)
  (:method ((left string) (right number))     nil)
  (:method ((left string) (right string))     (string< left right))
  (:method ((left string) (right symbol))     t)
  (:method ((left string) (right vector))     t)

  (:method ((left symbol) (right character))  nil)
  (:method ((left symbol) (right cons))       nil)
  (:method ((left symbol) (right number))     nil)
  (:method ((left symbol) (right string))     nil)
  (:method ((left symbol) (right symbol))    (and right (less (symbol-name left) (symbol-name right))))
  (:method ((left symbol) (right vector))       t)

  (:method ((left vector) (right character))  nil)
  (:method ((left vector) (right cons))       (do ((i 0 (1+ i)))
                                                  ((or (>= i (length left))
                                                       (>= i (length right))
                                                       (less (aref left i) (elt right i))
                                                       (less (elt right i) (aref left i)))
                                                   (cond ((>= i (length left)) nil)
                                                         ((>= i (length right)) t)
                                                         ((less (aref left i) (elt right i)) t)
                                                         ((less (elt right i) (aref left i)) nil)))))
  (:method ((left vector) (right number))     nil)
  (:method ((left vector) (right string))     nil)
  (:method ((left vector) (right symbol))     nil)
  (:method ((left vector) (right vector))     (do ((i 0 (1+ i)))
                                                  ((or (>= i (length left))
                                                       (>= i (length right))
                                                       (less (aref left i) (aref right i))
                                                       (less (aref right i) (aref left i)))
                                                   (cond ((>= i (length left)) nil)
                                                         ((>= i (length right)) t)
                                                         ((less (aref left i) (aref right i)) t)
                                                         ((less (aref right i) (aref left i)) nil)))))
  )

(defun test-less (left right)
  (cond ((less left right) (assert (not (less right left))))
        ((less right left) t)
        (t (assert (equal left right)))))

(progn
  (test-less nil nil)
  (test-less nil t)
  (test-less #\a #\b)
  (test-less #\a #\a)
  (test-less #\a nil)
  (test-less #\a #\A)
  (test-less #\a '(a))
  (test-less #\a #(a))
  (test-less '(a) '(a))
  (test-less '(a) '(b))
  (test-less '(a) '(b c))
  (test-less 2 #\a)
  (test-less 2 nil)
  (test-less 3 2)
  (test-less 3 "forty-two")
  (test-less 3 'a)
  (test-less 3 '(a b))
  (test-less 3 #(3))
  (test-less "a" "b")
  (test-less "a" "ab")
  (test-less "a" "bc")
  (test-less "a" "a")
  (test-less "a" nil)
  (test-less "a" "A")
  (test-less "a" 'a)
  (test-less "a" '(a))
  (test-less "a" #\a)
  (test-less "a" #(a))
  (test-less 'a "b")
  (test-less 'a "ab")
  (test-less 'a "bc")
  (test-less 'a "a")
  (test-less 'a nil)
  (test-less 'a "A")
  (test-less 'a 'a)
  (test-less 'a 'b)
  (test-less 'a '(a))
  (test-less 'a #\a)
  (test-less 'a #(a))
  (test-less #(a) "b")
  (test-less #(a) "ab")
  (test-less #(a) "bc")
  (test-less #(a) "a")
  (test-less #(a) nil)
  (test-less #(a) "A")
  (test-less #(a) 'a)
  (test-less #(a) 'b)
  ;(test-less #(a) '(a))
  (test-less #(a) #\a)
  ;(test-less #(a) #(a))
  (test-less #(a) #(a b))
  )

(defun less-equal (left right)
  (not (less right left)))

;; (defun =? (left right)
;;   (not (or (<? left right)
;;            (<? right left))))

(defun greater-equal (left right)
  (not (less left right)))

(defun greater (left right)
  (less right left))

(defgeneric lessp (left right)
  (:method (left (right null))    nil)
  (:method ((left null) right)    (not (null right)))
  (:method ((left character) (right character)) (char-lessp left right))
  (:method ((left character) (right cons))     t)
  (:method ((left character) (right null))   nil)
  (:method ((left character) (right number))   t)
  (:method ((left character) (right string))   t)
  (:method ((left character) (right symbol))   t)
  (:method ((left character) (right vector))   t)

  (:method ((left cons) (right character))    nil)
  (:method ((left cons) (right cons))         (or (lessp (car left) (car right))
                                                  (and (not (lessp (car right) (car left)))
                                                       (lessp (cdr left) (cdr right)))))
  (:method ((left cons) (right null))         nil)
  (:method ((left cons) (right number))       t)
  (:method ((left cons) (right string))       t)
  (:method ((left cons) (right symbol))       t)
  (:method ((left cons) (right vector))       (do ((i 0 (1+ i)))
                                                  ((or (>= i (length left))
                                                       (>= i (length right))
                                                       (lessp (elt left i) (aref right i))
                                                       (lessp (aref right i) (elt left i)))
                                                   (cond ((>= i (length left)) nil)
                                                         ((>= i (length right)) t)
                                                         ((lessp (elt left i) (aref right i)) t)
                                                         ((lessp (aref right i) (elt left i)) nil)))))

  (:method ((left number) (right character))  nil)
  (:method ((left number) (right cons))       nil)
  (:method ((left number) (right null))       nil)
  (:method ((left number) (right number))     (< left right))
  (:method ((left number) (right string))     t)
  (:method ((left number) (right symbol))     t)
  (:method ((left number) (right vector))     t)

  (:method ((left string) (right character))  nil)
  (:method ((left string) (right cons))       nil)
  (:method ((left string) (right null))       nil)
  (:method ((left string) (right number))     nil)
  (:method ((left string) (right string))     (string-lessp left right))
  (:method ((left string) (right symbol))     t)
  (:method ((left string) (right vector))     t)

  (:method ((left symbol) (right character))  nil)
  (:method ((left symbol) (right cons))       nil)
  (:method ((left symbol) (right number))     nil)
  (:method ((left symbol) (right string))     nil)
  (:method ((left symbol) (right symbol))    (and right (lessp (symbol-name left) (symbol-name right))))
  (:method ((left symbol) (right vector))       t)

  (:method ((left vector) (right character))  nil)
  (:method ((left vector) (right cons))       (do ((i 0 (1+ i)))
                                                  ((or (>= i (length left))
                                                       (>= i (length right))
                                                       (lessp (aref left i) (elt right i))
                                                       (lessp (elt right i) (aref left i)))
                                                   (cond ((>= i (length left)) nil)
                                                         ((>= i (length right)) t)
                                                         ((lessp (aref left i) (elt right i)) t)
                                                         ((lessp (elt right i) (aref left i)) nil)))))
  (:method ((left vector) (right number))     nil)
  (:method ((left vector) (right string))     nil)
  (:method ((left vector) (right symbol))     nil)
  (:method ((left vector) (right vector))     (do ((i 0 (1+ i)))
                                                  ((or (>= i (length left))
                                                       (>= i (length right))
                                                       (lessp (aref left i) (aref right i))
                                                       (lessp (aref right i) (aref left i)))
                                                   (cond ((>= i (length left)) nil)
                                                         ((>= i (length right)) t)
                                                         ((lessp (aref left i) (aref right i)) t)
                                                         ((lessp (aref right i) (aref left i)) nil)))))
  )

(defun test-lessp (left right)
  (cond ((less left right) (assert (not (less right left))))
        ((less right left) t)
        (t (assert (equalp left right)))))

(progn
  (test-lessp nil nil)
  (test-lessp nil t)
  (test-lessp #\a #\b)
  (test-lessp #\a #\a)
  (test-lessp #\a nil)
  (test-lessp #\a #\A)
  (test-lessp #\a '(a))
  (test-lessp #\a #(a))
  (test-lessp '(a) '(a))
  (test-lessp '(a) '(b))
  (test-lessp '(a) '(b c))
  (test-lessp 2 #\a)
  (test-lessp 2 nil)
  (test-lessp 3 2)
  (test-lessp 3 "forty-two")
  (test-lessp 3 'a)
  (test-lessp 3 '(a b))
  (test-lessp 3 #(3))
  (test-lessp "a" "b")
  (test-lessp "a" "ab")
  (test-lessp "a" "bc")
  (test-lessp "a" "a")
  (test-lessp "a" nil)
  (test-lessp "a" "A")
  (test-lessp "a" 'a)
  (test-lessp "a" '(a))
  (test-lessp "a" #\a)
  (test-lessp "a" #(a))
  (test-lessp 'a "b")
  (test-lessp 'a "ab")
  (test-lessp 'a "bc")
  (test-lessp 'a "a")
  (test-lessp 'a nil)
  (test-lessp 'a "A")
  (test-lessp 'a 'a)
  (test-lessp 'a 'b)
  (test-lessp 'a '(a))
  (test-lessp 'a #\a)
  (test-lessp 'a #(a))
  (test-lessp #(a) "b")
  (test-lessp #(a) "ab")
  (test-lessp #(a) "bc")
  (test-lessp #(a) "a")
  (test-lessp #(a) nil)
  (test-lessp #(a) "A")
  (test-lessp #(a) 'a)
  (test-lessp #(a) 'b)
  ;(test-lessp #(a) '(a))
  (test-lessp #(a) #\a)
  (test-lessp #(a) #(a))
  (test-lessp #(a) #(a b))
  )

(defun less-equalp (left right) (not (lessp right left)))
(defun greater-equalp (left right) (not (lessp left right)))
(defun greaterp (left right) (lessp right left))

;; Check consistency with existing functions
(progn
  (assert (eq (char-lessp #\a #\A) (lessp #\a #\A)))
  (assert (eq (char< #\a #\A) (less #\a #\A)))
  (assert (eq (string-lessp "foo" "FOO") (lessp "foo" "FOO")))
  (assert (eq (string< "foo" "FOO") (less "foo" "FOO"))))
